
test_formula_parsing_error <- function() {
	vars <- LETTERS[1:4]

	assert_error(check_formula(10))
	assert_error(check_formula(A ~ F, vars))
}

test_formula_parsing_correct <- function() {
	vars <- LETTERS[1:4]

	assert_equal(
		list(rows="A", cols="B"), 
		cast_parse_formula(A ~ B, vars)
	)
	assert_equal(
		list(rows=c("A", "C"), cols=c("B", "D")), 
		cast_parse_formula(A + C ~ B + D , vars)
	)
	assert_equal(
		list(rows=c("A"), cols=c("B", "C", "D")), 
		cast_parse_formula(A ~ ..., vars)
	)
	assert_equal(
		list(rows=c("A", "B"), cols=c("C", "D")), 
		cast_parse_formula(... ~ C + D, vars)
	)

	assert_equal(
		list(rows=c("A", "B"), cols=c("C", "D")), 
		cast_parse_formula(... ~ C + D, vars)
	)
}



test_function_aggregate <- function()  {
	data(CO2)
	CO2d <- melt(CO2, 1:4, 5)

	s1 <- reshape1(CO2d, c("Type"), fun=mean)
	s2 <- reshape1(CO2d, c("Type", "Treatment"), fun.aggregate=mean)
	s3 <- reshape1(CO2d, c("Type", "Treatment"), fun.aggregate=mean, margins="Type")

	assert_equal(c(2,2), dim(s1))
	assert_equal(c(4,3), dim(s2))
	assert_equal(c(6,3), dim(s3))

	assert_equal(s1[,2], s3[c(3,6),3])
	assert_equal(s2[,3], s3[-c(3,6),3])

	assert_equal(
		list(rows = c("Plant", "Type", "Treatment", "conc"), cols = "variable"), 
		cast_parse_formula(varnames=names(CO2d))
	)
	
	CO2_ordered <- data.frame(CO2[do.call("order", CO2),])
	rownames(CO2_ordered) <- 1:nrow(CO2)
	assert_equal(CO2_ordered, data.frame(cast(CO2d)))

	r1 <- cast(CO2d, Type ~ variable, fun.aggregate=mean)
	r2 <- cast(CO2d, Type + Treatment ~ variable, fun.aggregate=mean)

	assert_equal(data.matrix(s1), data.matrix(r1))
	assert_equal(data.matrix(s2), data.matrix(r2))
	
	s4 <- reshape1(CO2d, "Type", "variable", range, margins=TRUE)
 	assert_equal(max(CO2d$value), s4[3,5])
	assert_equal(min(CO2d$value), s4[3,4])
}


test_subset <- function() {
	data(CO2)
	CO2d <- melt(CO2, 1:4, 5)

	r1s <- cast(CO2d, Type ~ variable, mean, subset= Type=="Quebec")
	r1s.1 <- cast(subset(CO2d, Type=="Quebec"), Type ~ variable, mean)

	r2s <- cast(CO2d, Type + Treatment ~ variable, mean, subset=Treatment=="chilled")
	r2s.1 <- cast(subset(CO2d, Treatment=="chilled"), Type + Treatment ~ variable, mean)

	r3s <- cast(CO2d, Type + Treatment ~ variable, mean, subset=Type=="Quebec")
	r3s.1 <- cast(subset(CO2d, Type=="Quebec"), Type + Treatment ~ variable, mean)

	assert_equal(r1s.1, r1s)
	assert_equal(r2s.1, r2s)
	assert_equal(r3s.1, r3s)
	
}


test_full_column_cast <- function() {
	data(CO2)
	CO2d <- melt(CO2, 1:4, 5)
	vars <- LETTERS[1:4]

	assert_equal(
		list(rows="A", cols=character(0)), 
		cast_parse_formula(A ~ ., vars)
	)
	assert_equal(
		list(rows=c("A", "B", "C", "D"), cols=character(0)), 
		cast_parse_formula(... + . ~ ., vars)
	)
}

test_margins <- function() {
	data(CO2)
	CO2d <- melt(CO2, m=5)

	means <- structure(list(Type = structure(c(1, 1, 1, 1, 1, 1, 1, 2, 2, 
	2, 2, 2, 2, 2), .Label = c("Quebec", "Mississippi"), class = "factor"), 
	    conc = c(95, 175, 250, 350, 500, 675, 1000, 95, 175, 250, 
	    350, 500, 675, 1000), uptake = c(14.0666666666667, 27.0833333333333, 
	    35.9333333333333, 38.0833333333333, 38.1333333333333, 39.5, 
	    42, 10.45, 17.4833333333333, 21.8166666666667, 23.25, 23.6166666666667, 
	    24.4, 25.1666666666667)), .Names = c("Type", "conc", "uptake"
	), row.names = c("1", "2", "3", "4", "5", "6", "7", "8", "9", 
	"10", "11", "12", "13", "14"), class = c("cast_df", "data.frame"
	), r.aggregate = TRUE, r.col.names = structure(list(variable = "uptake"), .Names = "variable", row.names = "1", class = "data.frame"), r.row.labels = c("Type", 
	"conc"))
	
	assert_equal(means, cast(CO2d, Type + conc ~ variable, mean))
}